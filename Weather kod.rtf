{\rtf1\ansi\ansicpg1252\cocoartf2639
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fmodern\fcharset0 Courier;\f1\fmodern\fcharset0 Courier-Oblique;}
{\colortbl;\red255\green255\blue255;\red195\green123\blue90;\red23\green23\blue26;\red174\green176\blue183;
\red78\green112\blue88;\red185\green101\blue173;\red86\green148\blue105;\red155\green157\blue164;\red71\green149\blue242;
\red89\green158\blue96;\red31\green46\blue49;\red38\green157\blue169;\red103\green107\blue114;\red122\green167\blue47;
}
{\*\expandedcolortbl;;\csgenericrgb\c76471\c48235\c35294;\csgenericrgb\c9020\c9020\c10196;\csgenericrgb\c68235\c69020\c71765;
\csgenericrgb\c30588\c43922\c34510;\csgenericrgb\c72549\c39608\c67843;\csgenericrgb\c33725\c58039\c41176;\csgenericrgb\c60784\c61569\c64314;\csgenericrgb\c27843\c58431\c94902;
\csgenericrgb\c34902\c61961\c37647;\csgenericrgb\c12157\c18039\c19216;\csgenericrgb\c14902\c61569\c66275;\csgenericrgb\c40392\c41961\c44706;\csgenericrgb\c47843\c65490\c18431;
}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs26 \cf2 \cb3 ** WeatherHandlerler **\
\
package \cf4 algo.weatherdata;\
\
\cf2 import \cf4 java.io.IOException;\
\cf2 import \cf4 java.nio.file.Files;\
\cf2 import \cf4 java.nio.file.Paths;\
\cf2 import \cf4 java.time.LocalDate;\
\cf2 import \cf4 java.time.LocalTime;\
\cf2 import \cf4 java.util.*;\
\

\f1\i \cf5 /**\
 * Retrieves temperature data from a weather station file.\
 */\

\f0\i0 \cf2 public class \cf4 WeatherDataHandler \{\
\
	List<WeatherMeasurement> \cf6 weatherData \cf4 = \cf2 new \cf4 ArrayList<>();\
	
\f1\i \cf5 /**\
	 * Load weather data from file.\
	 *\
	 * \cf7 @param \cf8 filePath \cf5 path to file with weather data\
	 * \cf7 @throws \cf5 IOException if there is a problem while reading the file\
	 */\
	
\f0\i0 \cf2 public void \cf9 loadData\cf4 (String filePath) \cf2 throws \cf4 IOException \{\
		List<String> fileData = Files.
\f1\i readAllLines
\f0\i0 (Paths.
\f1\i get
\f0\i0 (filePath));\
\
		\cf2 for \cf4 (String line : fileData) \{\
			String[] parts = line.split(\cf10 "\cb11 ;\cb3 "\cf4 );\
			LocalDate date = LocalDate.
\f1\i parse
\f0\i0 (parts[\cf12 0\cf4 ]);\
			LocalTime time = LocalTime.
\f1\i parse
\f0\i0 (parts[\cf12 1\cf4 ]);\
			\cf2 double \cf4 temperature = Double.
\f1\i parseDouble
\f0\i0 (parts[\cf12 2\cf4 ]);\
			\cf2 boolean \cf4 confirmed = parts[\cf12 3\cf4 ].equals(\cf10 "G"\cf4 ); \cf13 // Assuming "G" represents confirmed, "Y" represents unconfirmed\
\
			\cf4 WeatherMeasurement measurement = \cf2 new \cf4 WeatherMeasurement(date, time, temperature, confirmed);\
			\cf6 weatherData\cf4 .add(measurement);\
		\}\
\
	\}\
	
\f1\i \cf5 /**\
	 * Search for average temperature for all dates between the two dates (inclusive).\
	 * Result is sorted by date (ascending). When searching from 2000-01-01 to 2000-01-03\
	 * the result should be:\
	 * 2000-01-01 average temperature: 0.42 degrees Celsius\
	 * 2000-01-02 average temperature: 2.26 degrees Celsius\
	 * 2000-01-03 average temperature: 2.78 degrees Celsius\
	 *\
	 * \cf7 @param \cf8 dateFrom \cf5 start date (YYYY-MM-DD) inclusive\
	 * \cf7 @param \cf8 dateTo \cf5 end date (YYYY-MM-DD) inclusive\
	 * \cf7 @return \cf5 average temperature for each date, sorted by date\
	 */\
	
\f0\i0 \cf2 public \cf4 List<String> \cf9 averageTemperatures\cf4 (LocalDate dateFrom, LocalDate dateTo) \{\
		Map<LocalDate, List<Double>> temperatureMap = \cf2 new \cf4 HashMap<>();\
\
		\cf13 // L\'e4gg till temperaturer f\'f6r varje datum i temperatureMap\
		\cf2 for \cf4 (WeatherMeasurement measurement : \cf6 weatherData\cf4 ) \{\
			LocalDate date = measurement.getDate();\
			\cf2 if \cf4 (date.isAfter(dateTo) || date.isBefore(dateFrom)) \{\
				\cf2 continue\cf4 ; \cf13 // Ignorera m\'e4tningar utanf\'f6r det \'f6nskade intervallet\
			\cf4 \}\
			\cf2 double \cf4 temperature = measurement.getTemperature();\
			temperatureMap.computeIfAbsent(date, k -> \cf2 new \cf4 ArrayList<>()).add(temperature);\
		\}\
\
		List<String> result = \cf2 new \cf4 ArrayList<>();\
		\cf13 // Ber\'e4kna genomsnittstemperaturen f\'f6r varje datum och l\'e4gg till i result-listan\
		\cf2 for \cf4 (LocalDate date = dateFrom; !date.isAfter(dateTo); date = date.plusDays(\cf12 1\cf4 )) \{\
			List<Double> temperatures = temperatureMap.getOrDefault(date, \cf2 new \cf4 ArrayList<>());\
			\cf2 if \cf4 (!temperatures.isEmpty()) \{\
				\cf2 double \cf4 sum = \cf12 0\cf4 ;\
				\cf2 for \cf4 (\cf2 double \cf4 temp : temperatures) \{\
					sum += temp;\
				\}\
				\cf2 double \cf4 average = sum / temperatures.size();\
				\cf13 // Avrunda genomsnittstemperaturen till tv\'e5 decimaler\
				\cf4 average = Math.
\f1\i round
\f0\i0 (average * \cf12 100.0\cf4 ) / \cf12 100.0\cf4 ;\
				result.add(date + \cf10 " average temperature: " \cf4 + average + \cf10 " degrees Celsius"\cf4 );\
			\}\
		\}\
\
		\cf2 return \cf4 result;\
	\}\
	
\f1\i \cf5 /**\
	 * Search for missing values between the two dates (inclusive) assuming there\
	 * should be 24 measurement values for each day (once every hour). Result is\
	 * sorted by number of missing values (descending). When searching from\
	 * 2000-01-01 to 2000-01-03 the result should be:\
	 * 2000-01-02 missing 1 values\
	 * 2000-01-03 missing 1 values\
	 * 2000-01-01 missing 0 values\
	 *\
	 * \cf7 @param \cf8 dateFrom \cf5 start date (YYYY-MM-DD) inclusive\
	 * \cf7 @param \cf8 dateTo \cf5 end date (YYYY-MM-DD) inclusive\
	 * \cf7 @return \cf5 dates with missing values together with number of missing values for each date, sorted by number of missing values (descending)\
	 */\
	
\f0\i0 \cf2 public \cf4 List<String> \cf9 missingValues\cf4 (LocalDate dateFrom, LocalDate dateTo) \{\
		\cf13 //
\f1\i \cf14 TODO: Implements method\
		
\f0\i0 \cf2 return null\cf4 ;\
	\}\
	
\f1\i \cf5 /**\
	 * Search for percentage of approved values between the two dates (inclusive).\
	 * When searching from 2000-01-01 to 2000-01-03 the result should be:\
	 * Approved values between 2000-01-01 and 2000-01-03: 32.86 %\
	 *\
	 * \cf7 @param \cf8 dateFrom \cf5 start date (YYYY-MM-DD) inclusive\
	 * \cf7 @param \cf8 dateTo \cf5 end date (YYYY-MM-DD) inclusive\
	 * \cf7 @return \cf5 period and percentage of approved values for the period\
	 */\
	
\f0\i0 \cf2 public \cf4 List<String> \cf9 approvedValues\cf4 (LocalDate dateFrom, LocalDate dateTo) \{\
		\cf13 //
\f1\i \cf14 TODO: Implements method\
		
\f0\i0 \cf2 return null\cf4 ;\
	\}\
\}\
\
\
\
\
** Weather Measurement **\
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf2 package \cf4 algo.weatherdata;\
\
\cf2 import \cf4 java.time.LocalDate;\
\cf2 import \cf4 java.time.LocalTime;\
\
\cf2 public class \cf4 WeatherMeasurement \{\
    \cf2 private \cf4 LocalDate \cf6 date\cf4 ;\
    \cf2 private \cf4 LocalTime \cf6 time\cf4 ;\
    \cf2 private double \cf6 temperature\cf4 ;\
    \cf2 private boolean \cf6 confirmed\cf4 ;\
\
    \cf2 public \cf9 WeatherMeasurement\cf4 (LocalDate date, LocalTime time, \cf2 double \cf4 temperature, \cf2 boolean \cf4 confirmed) \{\
        \cf2 this\cf4 .\cf6 date \cf4 = date;\
        \cf2 this\cf4 .\cf6 time \cf4 = time;\
        \cf2 this\cf4 .\cf6 temperature \cf4 = temperature;\
        \cf2 this\cf4 .\cf6 confirmed \cf4 = confirmed;\
    \}\
\
    \cf2 public \cf4 LocalDate \cf9 getDate\cf4 () \{\
        \cf2 return \cf6 date\cf4 ;\
    \}\
\
    \cf2 public void \cf9 setDate\cf4 (LocalDate date) \{\
        \cf2 this\cf4 .\cf6 date \cf4 = date;\
    \}\
\
    \cf2 public \cf4 LocalTime \cf9 getTime\cf4 () \{\
        \cf2 return \cf6 time\cf4 ;\
    \}\
\
    \cf2 public void \cf9 setTime\cf4 (LocalTime time) \{\
        \cf2 this\cf4 .\cf6 time \cf4 = time;\
    \}\
\
    \cf2 public double \cf9 getTemperature\cf4 () \{\
        \cf2 return \cf6 temperature\cf4 ;\
    \}\
\
    \cf2 public void \cf9 setTemperature\cf4 (\cf2 double \cf4 temperature) \{\
        \cf2 this\cf4 .\cf6 temperature \cf4 = temperature;\
    \}\
\
    \cf2 public boolean \cf9 isConfirmed\cf4 () \{\
        \cf2 return \cf6 confirmed\cf4 ;\
    \}\
\
    \cf2 public void \cf9 setConfirmed\cf4 (\cf2 boolean \cf4 confirmed) \{\
        \cf2 this\cf4 .\cf6 confirmed \cf4 = confirmed;\
    \}\
\}\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf4 \
}